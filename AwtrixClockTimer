blueprint:
  name: AWTRIX ⏳ Timer Display
  description: >
    This blueprint will print out the remaining time of a Home Assistant timer entity
    on the AWTRIX display, including a progress bar that reflects how much time is left.
  domain: automation
  input:
    awtrix:
      name: AWTRIX Device
      description: Select the Awtrix light
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          model: AWTRIX 3
          multiple: true
    timer_entity:
      name: Timer Entity
      description: Select the timer entity to monitor
      selector:
        entity:
          domain: timer
    progress_color:
      name: Progress Bar Color
      description: Color of the progress bar
      selector:
        text:
      default: '#ff0000'
    progress_background_color:
      name: Progress Bar Background Color
      description: Background color of the progress bar
      selector:
        text:
      default: '#000000'

mode: restart
variables:
  device_ids: !input awtrix
  timer_entity: !input timer_entity
  progress_color: !input progress_color
  progress_background_color: !input progress_background_color
  devices_topics: >-
    {%- macro get_device_topic(device_id) %}
    {{- states((device_entities(device_id) | select('search','device_topic') | list)[0]) }}
    {%- endmacro %}

    {%- set ns = namespace(devices=[]) %}
    {%- for device_id in device_ids %}
      {%- set device=get_device_topic(device_id)|replace(' ','') %}
      {% set ns.devices = ns.devices + [ device ~ '/custom/timer'] %}
    {%- endfor %}
    {{ ns.devices | reject('match','unavailable') | list}}

  payload: >-
    {% set duration = as_timedelta(state_attr(timer_entity, 'duration')).total_seconds() %}
    {% set remaining = as_datetime(state_attr(timer_entity, 'finishes_at')) - now().replace(microsecond=0) %}
    {% set passed = duration - remaining.total_seconds() %}
    {% set progress = ((passed/duration) * 100) | round(0) | int %}
    {{
      dict(
        icon = '42893',
        text = remaining | string,
        progress = progress,
        progressC = progress_color,
        progressBC = progress_background_color
      )
    }}

trigger:
  - platform: time_pattern
    minutes: /1

condition: []
action:
  - repeat:
      for_each: "{{ devices_topics }}"
      sequence:
        - service: mqtt.publish
          data:
            qos: 0
            retain: false
            topic: "{{ repeat.item }}"
            payload: "{{ payload }}"
